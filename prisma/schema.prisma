// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                   @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  email                  String                   @unique
  password               String
  address                String?
  phone                  String?
  website                String?
  bio                    String?
  avatar                 String?
  country                String?
  state                  String?
  city                   String?
  zip                    String?
  latitude               Float?
  longitude              Float?
  isFreelancer           Boolean                  @default(false)
  isClient               Boolean                  @default(false)
  isActive               Boolean                  @default(true)
  isEmailVerified        Boolean                  @default(false)
  isPhoneVerified        Boolean                  @default(false)
  isDeleted              Boolean                  @default(false)
  isArchived             Boolean                  @default(false)
  isSuspended            Boolean                  @default(false)
  isBlocked              Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  UserAndRoleRelation    UserAndRoleRelation[]
  UserSkillRelation      UserSkillRelation[]
  // Back-relations for freelancer domain
  freelancerProfile      FreelancerProfile?
  portfolioItems         PortfolioItem[]
  employments            Employment[]
  educations             Education[]
  certifications         Certification[]
  freelancingServices    FreelancingService[]
  proposals              Proposal[]
  freelancerContracts    Contract[]               @relation("FreelancerContracts")
  transactions           Transaction[]
  withdrawals            Withdrawal[]
  payoutMethods          PayoutMethod[]
  jobs                   Job[]
  blogPosts              BlogPost[]
  UserToLanguageRelation UserToLanguageRelation[]
  refreshTokens          RefreshToken[]
}

model UserLanguage {
  id                     String                   @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String                   @db.ObjectId
  language               String
  level                  String
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  UserToLanguageRelation UserToLanguageRelation[]
}

model UserToLanguageRelation {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  userId     String       @db.ObjectId
  languageId String       @db.ObjectId
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  user       User         @relation(fields: [userId], references: [id])
  language   UserLanguage @relation(fields: [languageId], references: [id])
}

model Skill {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  description       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  UserSkillRelation UserSkillRelation[]
  JobSkillRelation  JobSkillRelation[]
}

model UserSkillRelation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  skillId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Skill     Skill    @relation(fields: [skillId], references: [id])
}

model JobSkillRelation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  jobId     String   @db.ObjectId
  skillId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Job       Job      @relation(fields: [jobId], references: [id])
  Skill     Skill    @relation(fields: [skillId], references: [id])
}

model UserRole {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  UserAndRoleRelation UserAndRoleRelation[]
}

model UserAndRoleRelation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  roleId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Role      UserRole @relation(fields: [roleId], references: [id])
}

model FreelancerProfile {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  freelancerId    String   @unique @db.ObjectId
  title           String
  overview        String
  experienceLevel String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  freelancer User @relation(fields: [freelancerId], references: [id])
}

model PortfolioItem {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  freelancerId String   @db.ObjectId
  title        String
  description  String
  mediaUrls    String[]
  projectUrl   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  freelancer User @relation(fields: [freelancerId], references: [id])
}

model Employment {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  freelancerId String    @db.ObjectId
  company      String
  role         String
  startDate    DateTime
  endDate      DateTime?
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  freelancer User @relation(fields: [freelancerId], references: [id])
}

model Education {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  freelancerId String    @db.ObjectId
  school       String
  degree       String?
  field        String?
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  freelancer User @relation(fields: [freelancerId], references: [id])
}

model Certification {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  freelancerId  String    @db.ObjectId
  name          String
  issuer        String?
  issuedAt      DateTime?
  expiresAt     DateTime?
  credentialId  String?
  credentialUrl String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  freelancer User @relation(fields: [freelancerId], references: [id])
}

model FreelancingService {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  freelancerId String   @db.ObjectId
  title        String
  description  String
  category     String
  subcategory  String?
  isActive     Boolean  @default(true)
  rating       Float?
  ratingCount  Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  freelancer User                        @relation(fields: [freelancerId], references: [id])
  packages   FreelancingServicePackage[]
  reviews    FreelancingServiceReview[]
}

model FreelancingServicePackage {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  freelancingServiceId String   @db.ObjectId
  tier                 String
  name                 String
  description          String
  deliveryDays         Int
  revisions            Int      @default(0)
  price                Float
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  service FreelancingService @relation(fields: [freelancingServiceId], references: [id])
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Proposal {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  freelancerId String         @db.ObjectId
  jobId        String         @db.ObjectId
  coverLetter  String
  bidAmount    Float
  bidType      String
  attachments  String[]
  status       ProposalStatus @default(PENDING)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  freelancer User @relation(fields: [freelancerId], references: [id])
}

enum ContractStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}

model Contract {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  clientId         String         @db.ObjectId
  freelancerId     String         @db.ObjectId
  jobId            String?        @db.ObjectId
  gigId            String?        @db.ObjectId
  proposalId       String?        @db.ObjectId
  type             String
  status           ContractStatus @default(ACTIVE)
  startDate        DateTime       @default(now())
  endDate          DateTime?
  totalFixedAmount Float?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  freelancer User @relation("FreelancerContracts", fields: [freelancerId], references: [id])
}

model FreelancingServiceReview {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  freelancingServiceId String   @db.ObjectId
  clientId             String   @db.ObjectId
  rating               Int
  comment              String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  freelancingService FreelancingService @relation(fields: [freelancingServiceId], references: [id])
}

model Transaction {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  userId               String   @db.ObjectId
  contractId           String?  @db.ObjectId
  freelancingServiceId String?  @db.ObjectId
  type                 String
  amount               Float
  currency             String   @default("USD")
  direction            String
  meta                 Json?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Withdrawal {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  amount    Float
  currency  String   @default("USD")
  status    String   @default("pending")
  methodId  String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User          @relation(fields: [userId], references: [id])
  method PayoutMethod? @relation(fields: [methodId], references: [id])
}

model PayoutMethod {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  type      String
  label     String?
  details   Json
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id])
  withdrawals Withdrawal[]
}

model Job {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId     String   @db.ObjectId
  title        String
  requirements String
  attachments  String[]
  budget       Float
  deadline     DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  client           User               @relation(fields: [clientId], references: [id])
  JobSkillRelation JobSkillRelation[]
}

model BlogPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  authorId  String   @db.ObjectId
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id])
}

model RefreshToken {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  refreshToken String   @unique
  expiresAt    DateTime
  isRevoked    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}
